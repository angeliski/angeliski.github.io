(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{141:function(a,e,o){"use strict";o.r(e);var s=o(4),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,o=a._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[o("p",[a._v("Faz Muito tempo que não posto alguma coisa.. vou tentar manter uma constancia de posts.. vamos terminar aquele post de arrays? falta só uma certa busca...")]),a._v(" "),o("h1",{attrs:{id:"manda-busca-buscando-alguma-coisa"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#manda-busca-buscando-alguma-coisa","aria-hidden":"true"}},[a._v("#")]),a._v(" Manda Busca! Buscando alguma coisa?")]),a._v(" "),o("p",[a._v("Para ficar mais interessante vamos ver como fazer uma busca de determinado valor em um vetor, sem levar em consideração algorimos otimizados, de menor custo e blablabla (que AGORA não deve ser seu foco, primeiro entenda o que fazer, depois aprenda como fazer do melhor modo possivel.), logico que tambem não vamos fazer um serviço qualquer, vamos tentar fazer um programa razoavel. Vamos ao codigo:("),o("a",{attrs:{href:"http://www.inf.pucrs.br/~pinho/LaproI/Funcoes/AulaDeFuncoes.htm",target:"_blank",rel:"noopener noreferrer"}},[a._v(" Se você nao sabe o que é função.."),o("OutboundLink")],1),a._v(")")]),a._v(" "),o("div",{staticClass:"language-java extra-class"},[o("pre",{pre:!0,attrs:{class:"language-java"}},[o("code",[o("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/* A função recebe x, n >= 0 e v e devolve\num índice k em 0..n-1 tal que x == v[k].\nSe tal k não existe, devolve -1\\. */")]),a._v("\n\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" busca "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" v"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),o("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" k"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  k "),o("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n"),o("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),o("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),o("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("k "),o("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=")]),a._v(" "),o("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" v"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("k"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" x"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   k "),o("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-=")]),a._v(" "),o("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n "),o("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" k"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),o("p",[a._v("“Cara, eu nem entendi o que esse negocio ai faz.”\nTudo bem, eu confesso que num primeiro vislumbre é uma função sem sentido, mas vamos analisar ela pra você ver como é simples.O Comentario ajuda num entendimento geral do que ela faz, mas vamos começar pelo como: Ela recebe o x, que é o valor que queremos saber se esta ou não lá dentro, o n que é o tamanho desse Array e o Array em si. logo de cara ela declara um k qualquer e atribui para ele o ultimo indice do Array (n-1), e partimos para o while. Ele testa primeiro se o k esta numa posição valida, ou seja se ele é maior ou igual a zero( estamos indo do fim do Array para o começo), em seguida ele testa se o valor que esta em v[k] é diferente de x, se ele for diferente ele subtrai 1 de k(indo para outra posição, da maior posição para a menor), caso o valor de x e v[k] seja igual ele retorna k, ou seja ele devolve o indice onde se encontra o valor que é igual ao procurado.\n“E se ele não achar?” Ele retorna -1, como você pode observar quando k for igual a 0 ele entra no laço, dixa k=-1, em seguida o teste da falso e vem o retorno. Vale observar uma coisa importante nesse caso, a função vai retornar o indice do PRIMEIRO valor igual a x que ela achar, se houver mais de um valor igual em indices diferentes, ela simplesmente retorna o primeiro que achar.\n“Ah Angeliski, mas eu quero todos os indices que tem o valor igual do meu x, como eu faço?”\nLogica amigão, pense assim, você passa para a função um valor n que é o tamanho do Array, mas isso nada quer dizer pra ela, esse valor só representa apartir da onde ela vai buscar. Se você tem um Array de 100 posições e tem certeza que não esta nas ultimas 20, você passa 80 para a função, ela começa a procurar na posição 79 (n-1). De repente ela retorna o indice 46, mas como ter certeza de que não tem mais nenhum valor igual a x no restante do Array? É só passar para a função o valor de n como 46, assim ela vai iniciar a busca em 45 (n-1), testando o restante. Se o retorno for -1, você sabe que o indice 45 é o unico que contem um valor igual a x, se não você manda esse novo indice para ela testar os outros, isso até que o retorno seja -1,assim você tera todos os indices onde o valor de x esta.")]),a._v(" "),o("p"),a._v(" "),o("p",[a._v("Abraço! Qualquer duvida, comenta ai.")]),a._v(" "),o("p",[a._v("Angeliski")])])}),[],!1,null,null,null);e.default=r.exports}}]);