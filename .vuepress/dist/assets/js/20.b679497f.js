(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{140:function(t,e,o){"use strict";o.r(e);var n=o(4),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p",[t._v("O VRaptor em sua versão 4 utiliza o CDI 1.1 como base. E uma das considerações a serem feitas quando usamos o CDI é o escopo de vida dos objetos. Sempre é preciso escolher com cuidado o escopo, levando em consideração qual vai ser a aplicação do objeto.")]),t._v(" "),o("p",[t._v("Utilizar o "),o("em",[t._v("@RequestScoped")]),t._v(" onde é necessário um "),o("em",[t._v("@ApplicationScoped")]),t._v(" pode ser\ndesastroso. Um escopo muito util nesse cenário é o "),o("em",[t._v("@ConversationScoped")]),t._v(" que nos permite um controle maior conforme a nossa necessidade.")]),t._v(" "),o("p",[t._v("A aplicação apresentada nesse tutorial está disponivel no GitHub: "),o("a",{attrs:{href:"https://github.com/angeliski/ScoreCDI",title:"ScoreCDI",target:"_blank",rel:"noopener noreferrer"}},[t._v("ScoreCDI"),o("OutboundLink")],1),t._v(".")]),t._v(" "),o("p",[t._v("Abaixo nosso Controller:")]),t._v(" "),o("pre",[t._v("\t"),o("code",{staticClass:"java"},[t._v('\n\t\tpackage br.com.angeliski.controller;\n\n\t\timport java.io.Serializable;\n\t\timport java.util.Random;\n\n\t\timport javax.enterprise.context.Conversation;\n\t\timport javax.enterprise.context.ConversationScoped;\n\t\timport javax.inject.Inject;\n\n\t\timport br.com.caelum.vraptor.Controller;\n\t\timport br.com.caelum.vraptor.Get;\n\t\timport br.com.caelum.vraptor.Post;\n\t\timport br.com.caelum.vraptor.Result;\n\n\t\t@Controller\n\t\t@ConversationScoped\n\t\tpublic class HomeController implements Serializable {\n\n\t\t\tprivate static final long serialVersionUID = 943045823176068998L;\n\t\t\tprivate Result result;\n\t\t\tprivate Conversation conversation;\n\t\t\tprivate Integer resultado;\n\t\t\tprivate int total;\n\n\t\t\t/**\n\t\t\t* @deprecated CDI eyes only\n\t\t\t*/\n\t\t\tprotected HomeController() {\n\t\t\t\tthis(null, null);\n\t\t\t}\n\n\t\t\t@Inject\n\t\t\tpublic HomeController(Result result, Conversation conversation) {\n\t\t\t\tsuper();\n\t\t\t\tthis.result = result;\n\t\t\t\tthis.conversation = conversation;\n\t\t\t}\n\n\t\t\t@Get\n\t\t\tpublic void index() {\n\t\t\t}\n\n\t\t\t@Get\n\t\t\tpublic void game() {\n\t\t\t\tif (conversation.isTransient()) {\n\t\t\t\t\tconversation.begin();\n\t\t\t\t}\n\t\t\t\tresult.include("cid", conversation.getId());\n\t\t\t\tgerarPergunta();\n\t\t\t}\n\n\t\t\tprivate void gerarPergunta() {\n\t\t\t\tRandom random = new Random();\n\t\t\t\tInteger primeiroValor = random.nextInt(100);\n\t\t\t\tInteger segundoValor = random.nextInt(100);\n\n\t\t\t\tresultado = primeiroValor * segundoValor;\n\n\t\t\t\tresult.include("primeiro", primeiroValor);\n\t\t\t\tresult.include("segundo", segundoValor);\n\t\t\t}\n\n\t\t\t@Post\n\t\t\tpublic void game(Integer resposta) {\n\t\t\t\tif (resultado.equals(resposta)) {\n\t\t\t\t\ttotal++;\n\t\t\t\t}\n\t\t\t\tgerarPergunta();\n\t\t\t\tresult.include("cid", conversation.getId());\n\t\t\t}\n\n\t\t\t@Get\n\t\t\tpublic void fim() {\n\t\t\t\tif (!conversation.isTransient()) {\n\t\t\t\t\tconversation.end();\n\t\t\t\t}\n\t\t\t\tresult.include("total", total);\n\t\t\t}\n\n\t\t}\n\t')]),t._v("\n")]),t._v(" "),o("p",[t._v("A primeira distinção desse Controller é a anotação "),o("em",[t._v("@ConversationScoped")]),t._v(" na classe. Isso indica para o CDI qual vai ser o escopo, mas cuidado: só isso não é suficiente para que a sua classe tenha um escopo maior que o escopo request.\nPara que o escopo se torne persistente, não perdendo os dados a cada requisição, é necessário injetar um objeto "),o("em",[t._v("Conversation")]),t._v(" e chamar seu método "),o("em",[t._v("begin")]),t._v(". Isso pode ser observado aqui:")]),t._v(" "),o("pre",[t._v("\t"),o("code",{staticClass:"java"},[t._v('\n\t\t@Get\n\t\tpublic void game() {\n\t\t\tif (conversation.isTransient()) {\n\t\t\t\tconversation.begin();\n\t\t\t}\n\t\t\tresult.include("cid", conversation.getId());\n\t\t\tgerarPergunta();\n\t\t}\n\t')]),t._v("\n")]),t._v(" "),o("p",[t._v("Nesse método a conversação é iniciada. O "),o("em",[t._v("Conversation")]),t._v(" tem um estado padrão conhecido como "),o("em",[t._v("transient")]),t._v(". Quando o método "),o("em",[t._v("begin")]),t._v(" é acionado ele passa para o "),o("em",[t._v("long-running")]),t._v(" mantendo os dados até que seja invocado o método "),o("em",[t._v("end")]),t._v(" do "),o("em",[t._v("Conversation")]),t._v(".\nSó que um detalhe importante deve ser observado. O CDI não tem como saber a qual objeto você está tratando. O único modo dele saber isso é você informando qual o identificador daquela conversação e isso é feito através do pârametro "),o("strong",[t._v("cid")]),t._v(".\nÉ necessário informar na url esse pârametro para que o CDI consiga recuperar o objeto correto. Observe que o pârametro cid é incluido no result para que seja possível utilizar ele na pagina.\nO nome utilizado para incluir o "),o("em",[t._v("id")]),t._v(" do "),o("em",[t._v("Conversation")]),t._v(" no result não é fundamental. Ele poderia ser qualquer um, desde que fosse recuperado corretamente na pagina. Só é fundamental utilizar o pârametro "),o("strong",[t._v("cid")]),t._v(" quando a requisição for enviada para o servidor.\nObserve como ficou a nossa pagina que vai utilizar esse parâmetro.\n"),o("pre",[o("code",{staticClass:"xhtml"},[t._v('\n{% codeblock lang:hxtml %}\n<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>\n<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>')])])]),t._v(" "),o("pre",[o("code",[t._v('\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<title>Score CDI</title>\n\n\t</head>\n\t<body>\n\t\t<h4>Sessão atual ${cid}</h4>\n\t\t<p>Quanto é ${primeiro} * ${segundo}?</p>\n\t\t<form action="${linkTo[HomeController].game}?cid=${cid}" method="POST">\n\t\t\t<input name="resposta" type="number" required>\n\t\t\t<button type="submit">Continuar jogo!</button>\n\t\t</form>\n\n\t\t<a href="${linkTo[HomeController].fim}?cid=${cid}">Finalizar!</a>\n\n\t</body>\n\t</html>\n\t{% endcodeblock %}\n</code>\n')])]),t._v(" "),o("p",[t._v("Você pode observar que a action do formulário faz o uso correto do "),o("strong",[t._v("cid")]),t._v(". Quando essa requisição for enviada ao servidor, vai enviar junto o identificador correto.\nEnquanto a requisição for feita enviando o "),o("strong",[t._v("cid")]),t._v(" o número exibido em Sessão atual vai continuar o mesmo, pois a conversação vai se manter. Você pode fazer um teste acessando diretamente '/home/game' sem enviar o cid no pârametro.\nVai ser iniciada uma nova conversação e o cid irá se modificar.")]),t._v(" "),o("p",[t._v("Por fim temos o método que encerra o "),o("em",[t._v("long-running")]),t._v(" através do método "),o("em",[t._v("end")]),t._v(":")]),t._v(" "),o("pre",[t._v("\t"),o("code",{staticClass:"java"},[t._v('\n\t\t@Get\n\t\tpublic void fim() {\n\t\t\tif (!conversation.isTransient()) {\n\t\t\t\tconversation.end();\n\t\t\t}\n\t\t\tresult.include("total", total);\n\t\t}\n\n\t')]),t._v("\n")]),t._v(" "),o("p",[t._v("Aqui é valido observar que caso você não encerre uma conversação, ela não vai se manter em memória por muito mais que dois minutos, que é o tempo padrão. Isso garante que diferente do "),o("em",[t._v("@SessionScoped")]),t._v(" os recursos vão ser liberados antes, caso a aplicação não encerre o estado daquele objeto.\nO timeout pode ser ajustado através do método "),o("em",[t._v("setTimeout")]),t._v(" conforme a necessidade, mas normalmente não é preciso.")]),t._v(" "),o("p",[t._v("Duvidas? gostou? Me acha um idiota?")]),t._v(" "),o("p",[t._v("Comenta ai!!")]),t._v(" "),o("p",[t._v("Angeliski")])])}),[],!1,null,null,null);e.default=a.exports}}]);